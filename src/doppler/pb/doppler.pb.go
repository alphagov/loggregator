// Code generated by protoc-gen-go.
// source: doppler.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	doppler.proto

It has these top-level messages:
	Subscription
	DataPacket
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Subscription struct {
	Guid string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DataPacket struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DataPacket) Reset()                    { *m = DataPacket{} }
func (m *DataPacket) String() string            { return proto.CompactTextString(m) }
func (*DataPacket) ProtoMessage()               {}
func (*DataPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Subscription)(nil), "pb.Subscription")
	proto.RegisterType((*DataPacket)(nil), "pb.DataPacket")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Doppler service

type DopplerClient interface {
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (Doppler_SubscribeClient, error)
}

type dopplerClient struct {
	cc *grpc.ClientConn
}

func NewDopplerClient(cc *grpc.ClientConn) DopplerClient {
	return &dopplerClient{cc}
}

func (c *dopplerClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (Doppler_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Doppler_serviceDesc.Streams[0], c.cc, "/pb.Doppler/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dopplerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Doppler_SubscribeClient interface {
	Recv() (*DataPacket, error)
	grpc.ClientStream
}

type dopplerSubscribeClient struct {
	grpc.ClientStream
}

func (x *dopplerSubscribeClient) Recv() (*DataPacket, error) {
	m := new(DataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Doppler service

type DopplerServer interface {
	Subscribe(*Subscription, Doppler_SubscribeServer) error
}

func RegisterDopplerServer(s *grpc.Server, srv DopplerServer) {
	s.RegisterService(&_Doppler_serviceDesc, srv)
}

func _Doppler_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DopplerServer).Subscribe(m, &dopplerSubscribeServer{stream})
}

type Doppler_SubscribeServer interface {
	Send(*DataPacket) error
	grpc.ServerStream
}

type dopplerSubscribeServer struct {
	grpc.ServerStream
}

func (x *dopplerSubscribeServer) Send(m *DataPacket) error {
	return x.ServerStream.SendMsg(m)
}

var _Doppler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Doppler",
	HandlerType: (*DopplerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Doppler_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("doppler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xc9, 0x2f, 0x28,
	0xc8, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe2,
	0xe2, 0x09, 0x2e, 0x4d, 0x2a, 0x4e, 0x2e, 0xca, 0x2c, 0x28, 0xc9, 0xcc, 0xcf, 0x13, 0x12, 0xe2,
	0x62, 0x49, 0x2f, 0xcd, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xd4,
	0xb8, 0xb8, 0x5c, 0x12, 0x4b, 0x12, 0x03, 0x12, 0x93, 0xb3, 0x53, 0x4b, 0x84, 0x24, 0xb8, 0xd8,
	0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0xc1, 0x8a, 0x78, 0x82, 0x60, 0x5c, 0x23, 0x1b, 0x2e,
	0x76, 0x17, 0x88, 0x05, 0x42, 0x86, 0x5c, 0x9c, 0x50, 0x63, 0x93, 0x52, 0x85, 0x04, 0xf4, 0x0a,
	0x92, 0xf4, 0x90, 0x6d, 0x91, 0xe2, 0x03, 0x89, 0x20, 0xcc, 0x54, 0x62, 0x30, 0x60, 0x4c, 0x62,
	0x03, 0x3b, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x6e, 0xee, 0x09, 0xa5, 0x00, 0x00,
	0x00,
}
